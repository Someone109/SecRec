import{serve as U}from"@hono/node-server";import{Hono as q}from"hono";import{createClient as F}from"redis";import w from"fs";var L=process.env.REDIS_HOST||"redisKeyStore",H=process.env.REDIS_PORT||"16379",K=process.env.REDIS_URL||`rediss://${L}:${H}`,D=process.env.REDIS_CA||"/run/secrets/redisKeyStore_ca.crt",k=process.env.REDIS_KEY||"/run/secrets/redisKeyStore_client.key",A=process.env.REDIS_CERT||"/run/secrets/redisKeyStore_client.crt";function d(e){try{return w.readFileSync(e)}catch(r){throw console.error(`Failed to read file: ${e}`),r}}console.log("[Redis] Connecting with:",{url:K,ca:D,key:k,cert:A});var R=F({url:K,socket:{tls:!0,ca:d(D),key:d(k),cert:d(A),rejectUnauthorized:!0}});await R.connect();console.log("Connected to Redis server");var l=R;import o,{generateKeyPairSync as O}from"crypto";import z from"fs";var I="your-secure-passphrase";function m(e,r){return o.privateDecrypt({key:r,passphrase:I,padding:o.constants.RSA_PKCS1_OAEP_PADDING,oaepHash:"sha256"},e)}var N=z.readFileSync("/run/secrets/backendai_private.pem","utf8");function g(e){return o.sign("sha256",Buffer.from(e),{key:N,padding:o.constants.RSA_PKCS1_PSS_PADDING,saltLength:o.constants.RSA_PSS_SALTLEN_DIGEST})}function P(){let{publicKey:e,privateKey:r}=O("rsa",{modulusLength:4096,publicKeyEncoding:{type:"spki",format:"pem"},privateKeyEncoding:{type:"pkcs8",format:"pem",cipher:"aes-256-cbc",passphrase:I}});return{publicKey:e,privateKey:r}}function T(e,r){let t=Buffer.isBuffer(e)?e:Buffer.from(e,"utf8");return o.publicEncrypt({key:r,padding:o.constants.RSA_PKCS1_OAEP_PADDING,oaepHash:"sha256"},t)}function C(e,r,t){let n=o.createDecipheriv("aes-256-cbc",r,t);return Buffer.concat([n.update(e),n.final()])}import G from"node-tesseract-ocr";var $={lang:"eng",oem:1,psm:3};async function j(e){try{return await G.recognize(e,$)}catch(r){throw console.error("OCR Error:",r),new Error("Failed to recognize text from image.")}}import{fileTypeFromBuffer as W}from"file-type";import{logger as Y}from"hono/logger";import h from"fs";import V from"https";import J from"crypto";var M=!0,X=60,f=new q;M&&f.use(Y());f.get("/session",async e=>{try{let{publicKey:r,privateKey:t}=P();await l.set(`key:${r}`,t,{EX:X});let n=g(r);return e.json({publicKey:r,signature:n})}catch(r){console.error("Session error:",r)}});f.post("/imageup",async e=>{try{let r=await e.req.json(),{image:t,encryptedKey:n,iv:i,publicKey:s,encryptionKey:a,signature:x}=r;if(!t||!n||!i||!s||!a)return e.json({error:"Missing required fields."},400);let S,_,B,u,v,p;try{S=Buffer.from(t),_=Buffer.from(n),B=Buffer.from(i)}catch{return e.json({error:"Invalid encoding in one or more fields."},400)}if(u=await l.get(`key:${s}`),!u)return e.json({error:"Invalid or expired public key."},400);try{v=m(_,u)}catch{return e.json({error:"Failed to decrypt AES key."},400)}try{p=C(S,v,B)}catch{return e.json({error:"Failed to decrypt image with AES key."},400)}let E=await W(p);if(!E||!E.mime.startsWith("image/"))return e.json({error:"Uploaded file is not a valid image."},400);try{let c=J.createHash("sha256").update(p+a).digest("hex"),y=m(Buffer.from(x),u);if(c!==y.toString())return e.json({error:"Data integrity check failed."},400)}catch{return e.json({error:"Data integrity check failed."},400)}try{let c=await j(p),y=T(c,a),b=g(y);return e.json({text:y,signature:b})}catch{return e.json({error:"Failed to process image."},400)}}catch(r){return console.error("Image upload error:",r),e.json({error:"Failed to upload image."},500)}});var Q={key:h.readFileSync("/run/secrets/backend_server.key"),cert:h.readFileSync("/run/secrets/backend_server.crt"),ca:h.readFileSync("/run/secrets/frontend_clients_ca.crt"),requestCert:!0,rejectUnauthorized:!0},Z=V.createServer(Q);f.use(async(e,r)=>{try{let t=e.env.incoming;if(t&&t.socket){let n=t.socket,i=n.authorized,s=n.getPeerCertificate(!0);if(!s||Object.keys(s).length===0)return e.json({error:"Client certificate required"},401);let a=s.subject?.CN;e.env.clientCN=a??"",e.env.clientCert=s,e.env.clientCertAuthorized=i}}catch{return e.json({error:"Failed to validate client certificate"},401)}return r()});U({fetch:f.fetch,port:3e3,createServer:()=>Z},e=>{console.log(`mTLS server running on https://localhost:${e.port}`)});
